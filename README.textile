h1. What is it?

You can find out more about HAML at "haml-lang.com":http://haml-lang.com
You can find out more about GO at "golang.org":http://golang.org

I've tried to remain diligent about reproducing the output from the canonical Ruby-based parser, so if you feel familiar with the one, then you should feel familiar with the other.

This branch compiels with 6g/8g version release.r57.1 8413.

h1. Is it done?

I think so. It has...

* Tags with
** empty content;
** attributes of the form @{:attr => "value"}@;
** id moniker using "#" (@#divId@); and,
** class moniker using "." (@.divClass@).
* Tag nesting
* Scope lookup
** Arbitrary number of keys as specified by struct (@someKeyInScope.Subkey1.Subkey2@)
** Valid as tag content (@%p= someKeyInScope@)
** Valid as tag attribute value (@%p{:attr => someKeyInScope}@)
** Valid as tag attribute name (@%p{someKeyInScope => "value"}@)
* Engine-level autoclose option (@&lt;br /&gt;@ vs. @&lt;br&gt;@)
* Tag-specific close option (@%br/@ becomes @&lt;br /&gt;@ regardless of autoclose setting)
* Whitespace removal with the @<@ operator
* Simple scripting
** Declaration and assignment of strings, floats, and ints (- varname := "value")
** Range looping construct (- for i, v := range scopeVar)
* Error messages for badly-formed templates

If you would like another feature added, just log an issue and I'll review it forthright.

h1. How can I install this?

To install the library for use in your project, you can use goinstall.

pre. goinstall "github.com/realistschuckle/gohaml/lib"

h1. How can I build this?

Install "goll1e":https://github.com/realistschuckle/goll1e
Get the source.
Run @gomake@ at <projectroot>/lib.

h1. How can I use it?

How about something like this? Save it, compile it, link it, and run it!

bc.. package main

import (
	"gohaml"
	"fmt"
)

func main() {
	var scope = make(map[string]interface{})
	scope["lang"] = "HAML"
	content := "I love <\n=lang<\n!"
	engine := gohaml.NewEngine(content)
	output := engine.Render(scope)
	fmt.Println(output) // Prints "I love HAML!"
}

h1. Can I use it some other way, too?

Yes, you sure can! The exe directory has a project to run a command-line version of gohaml.

After you install the @gohaml@ package, download the code and type @make install@. Then, command-line it yourself.

pre. gohaml input.haml output.html

h1. Can I type to gohaml on stdin?

Yep. And, it'll print to standard out, too. Just type @gohaml@ at the command prompt after installation and you can type all you want with a CTRL+D to signal EOF.
